/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartlogging.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x300;

/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.swiEnabled = false;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

/* No memory allocation occurs, so no heap is needed */
BIOS.heapSize = 2048;

/* No runtime stack checking is performed */
Task.checkStackFlag = false;

/* Reduce the number of task priorities */
Task.numPriorities = 5;

/* Reduce the size of the Idle Task's stack */
Task.idleTaskStackSize = 2048;

/* ================ Task configuration ================ */
var task0Params = new Task.Params();
task0Params.stackSize = 4048;
Program.global.task0 = Task.create("&taskFxn", task0Params);

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
BIOS.runtimeCreatesEnabled = true;
BIOS.clockEnabled = true;
Clock.swiPriority = 15;
TIRTOS.useUART = true;
TIRTOS.useGPIO = true;
Program.heap = 2048;
var task2Params = new Task.Params();
task2Params.instance.name = "menu_task";
task2Params.priority = 2;
task2Params.stackSize = 70000;
Program.global.menu_task = Task.create("&menu_taskFxn", task2Params);
Task.defaultStackSize = 2048;
var task3Params = new Task.Params();
task3Params.instance.name = "pultExchangeTask";
task3Params.priority = 3;
task3Params.stackSize = 4048;
Program.global.pultExchangeTask = Task.create("&pultExchangeTaskFxn", task3Params);
var task3Params0 = new Task.Params();
task3Params0.instance.name = "pultDriverTask";
task3Params0.priority = 4;
task3Params0.stackSize = 4048;
Program.global.pultDriverTask = Task.create("&pultDriverTaskFxn", task3Params0);
TIRTOS.useSDSPI = true;
FatFS.ramdiskSize = 131072;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "exchangeTaskSemafore";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.exchangeTaskSemafore = Semaphore.create(1, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "extrenalDevSem";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.extrenalDevSem = Semaphore.create(1, semaphore1Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1ms";
clock1Params.period = 1;
clock1Params.startFlag = true;
Program.global.clock1ms = Clock.create("&fastClockInterrupt", 1, clock1Params);
var task4Params = new Task.Params();
task4Params.instance.name = "motionSynchro";
task4Params.stackSize = 4048;
Program.global.motionSynchro = Task.create("&motionSynchroFxn", task4Params);
var task5Params = new Task.Params();
task5Params.instance.name = "pultExchangeAltTask";
task5Params.priority = 3;
task5Params.stackSize = 8096;
Program.global.pultExchangeAltTask = Task.create("&pultAltExchangeTask", task5Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "exchangeAltSem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.exchangeAltSem = Semaphore.create(1, semaphore2Params);
