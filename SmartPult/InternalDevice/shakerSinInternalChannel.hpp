/*
 * shakerSinInternalChannel.hpp
 *
 *  Created on: 28 мая 2020 г.
 *      Author: Кирилл Чеверев
 */

#ifndef INTERNALDEVICE_SHAKERSININTERNALCHANNEL_HPP_
#define INTERNALDEVICE_SHAKERSININTERNALCHANNEL_HPP_




#include <Pult/PultClasses.h>
#include "stddef.h"
#include "stdint.h"
#include "stdio.h"
#include "shakerInternalChannel.hpp"


static float bragisSinValue[500] = {0.0, 0.012566, 0.02513, 0.03769, 0.050244, 0.06279, 0.075327,0.087851, 0.100361, 0.112856, 0.125333, 0.13779, 0.150225, 0.162637, 0.175022, 0.187381,
0.199709, 0.212006, 0.22427, 0.236498, 0.248689, 0.26084, 0.272951, 0.285018, 0.29704, 0.309016, 0.320942, 0.332818, 0.344642, 0.356411, 0.368123, 0.379778, 0.391372, 0.402905,
0.414374, 0.425778, 0.437114, 0.448382, 0.459578, 0.470702, 0.481752, 0.492726, 0.503621,0.514438, 0.525173, 0.535825, 0.546392, 0.556874, 0.567267, 0.577571, 0.587783, 0.597903,
0.607928, 0.617858, 0.627689, 0.637422, 0.647054, 0.656584, 0.66601, 0.675331, 0.684545,0.693651, 0.702648, 0.711533, 0.720307, 0.728966, 0.737511, 0.745939, 0.754249, 0.76244,
0.770511, 0.77846, 0.786286, 0.793988, 0.801565, 0.809015, 0.816337, 0.82353, 0.830594,0.837526, 0.844326, 0.850992, 0.857525, 0.863921, 0.870182, 0.876305, 0.882289, 0.888134,
0.893839, 0.899403, 0.904825, 0.910104, 0.915239, 0.92023, 0.925075, 0.929775, 0.934327,0.938732, 0.942989, 0.947097, 0.951055, 0.954863, 0.95852, 0.962026, 0.96538, 0.968582,
0.97163, 0.974526, 0.977267, 0.979854, 0.982286, 0.984563, 0.986685, 0.988651, 0.990461,0.992114, 0.993611, 0.99495, 0.996133, 0.997158, 0.998026, 0.998737, 0.999289, 0.999684,
0.999921, 1.0, 0.999921, 0.999684, 0.99929, 0.998737, 0.998027, 0.997159, 0.996134,0.994952, 0.993612, 0.992116, 0.990462, 0.988653, 0.986687, 0.984566, 0.982289, 0.979856,
0.97727, 0.974528, 0.971633, 0.968585, 0.965384, 0.96203, 0.958524, 0.954867, 0.951059,0.947101, 0.942993, 0.938737, 0.934332, 0.929779, 0.92508, 0.920235, 0.915244, 0.910109,
0.90483, 0.899409, 0.893845, 0.88814, 0.882295, 0.876311, 0.870188, 0.863928, 0.857531,0.850999, 0.844333, 0.837533, 0.830601, 0.823538, 0.816344, 0.809022, 0.801572, 0.793996,
0.786294, 0.778468, 0.770519, 0.762448, 0.754257, 0.745947, 0.737519, 0.728975, 0.720316,0.711542, 0.702657, 0.69366, 0.684554, 0.67534, 0.666019, 0.656593, 0.647063, 0.637432,
0.627699, 0.617867, 0.607938, 0.597913, 0.587793, 0.577581, 0.567277, 0.556884, 0.546403,0.535836, 0.525183, 0.514448, 0.503632, 0.492737, 0.481763, 0.470713, 0.459589, 0.448393,
0.437125, 0.425789, 0.414386, 0.402916, 0.391384, 0.379789, 0.368135, 0.356422, 0.344653,0.33283, 0.320954, 0.309028, 0.297052, 0.28503, 0.272963, 0.260853, 0.248701, 0.23651,
0.224282, 0.212019, 0.199722, 0.187393, 0.175035, 0.162649, 0.150237, 0.137802, 0.125345,0.112868, 0.100374, 0.087863, 0.075339, 0.062803, 0.050257, 0.037703, 0.025143, 0.012579,
0.000013, -0.012553, -0.025117, -0.037677, -0.050232,-0.062778,-0.075314,-0.087838, -0.100349, -0.112843,-0.12532,-0.137777,-0.150213,-0.162624,-0.17501,-0.187368,-0.199697,
-0.211994,-0.224258,-0.236486,-0.248677,-0.260828,-0.272939,-0.285006,-0.297028,-0.309004,-0.32093,-0.332806,-0.34463,-0.356399,-0.368111,-0.379766,-0.391361,-0.402893,-0.414363,
-0.425766,-0.437103,-0.44837,-0.459567,-0.470691,-0.481741,-0.492715,-0.50361,-0.514427,-0.525162,-0.535814,-0.546382,-0.556863,-0.567257,-0.57756,-0.587773,-0.597893,-0.607918,
-0.617848,-0.627679,-0.637412,-0.647044,-0.656574,-0.666,-0.675321,-0.684536,-0.693642,-0.702639,-0.711525,-0.720298,-0.728958,-0.737502,-0.74593,-0.754241,-0.762432,-0.770503,
-0.778452,-0.786278,-0.79398,-0.801557,-0.809007,-0.81633,-0.823523,-0.830587,-0.837519,-0.844319,-0.850986,-0.857518,-0.863915,-0.870175,-0.876299,-0.882283,-0.888129,-0.893834,
-0.899398,-0.90482,-0.910099,-0.915234,-0.920225,-0.925071,-0.92977,-0.934323,-0.938728,-0.942985,-0.947093,-0.951051,-0.954859,-0.958517,-0.962023,-0.965377,-0.968579,-0.971627,
-0.974523,-0.977264,-0.979851,-0.982284,-0.984561,-0.986683,-0.988649,-0.990459,-0.992112,-0.993609,-0.994949,-0.996132,-0.997157,-0.998026,-0.998736,-0.999289,-0.999684,-0.999921,
-1.0,-0.999921,-0.999685,-0.99929,-0.998738,-0.998028,-0.99716,-0.996135,-0.994953,-0.993613,-0.992117,-0.990464,-0.988655,-0.986689,-0.984568,-0.982291,-0.979859,-0.977272,-0.974531,
-0.971636,-0.968588,-0.965387,-0.962033,-0.958528,-0.954871,-0.951063,-0.947105,-0.942997,-0.938741,-0.934336,-0.929784,-0.925085,-0.92024,-0.915249,-0.910115,-0.904836,-0.899414,
-0.893851,-0.888146,-0.882301,-0.876317,-0.870194,-0.863934,-0.857538,-0.851006,-0.844339,-0.83754,-0.830608,-0.823545,-0.816352,-0.80903,-0.80158,-0.794003,-0.786302,-0.778476,
-0.770527,-0.762457,-0.754266,-0.745956,-0.737528,-0.728984,-0.720324,-0.711551,-0.702666,-0.693669,-0.684563,-0.675349,-0.666029,-0.656603,-0.647073,-0.637441,-0.627709,-0.617877,
-0.607948,-0.597923,-0.587804,-0.577591,-0.567288,-0.556895,-0.546414,-0.535846,-0.525194,-0.514459,-0.503643,-0.492747,-0.481774,-0.470724,-0.459601,-0.448404,-0.437137,-0.425801,
-0.414397,-0.402928,-0.391395,-0.379801,-0.368147,-0.356434,-0.344665,-0.332842,-0.320966,-0.30904,-0.297065,-0.285042,-0.272975,-0.260865,-0.248713,-0.236523,-0.224294,-0.212031,
-0.199734,-0.187405,-0.175047,-0.162661,-0.15025,-0.137815,-0.125358,-0.112881,-0.100386,-0.087876,-0.075352,-0.062815,-0.050269,-0.037715,-0.025155,-0.012591};



class IShakerSin: public IShakerBlocking {

public:

    virtual IResistor& ISpeedResistor() =0;

    virtual IResistor& IFriqResistor() =0;

    virtual IResistor& IPhaseResistor() =0;

};


class ShakerSinChannel:public JoyChannelBase,public IShakerSin
{

private:

    float * tableBragis;
    VirtualMenuResistor gainResistor;
    VirtualMenuResistor friquensyResistor;
    VirtualMenuResistor phaseResistor;
    float counter,counterNextValue;


public:

    ShakerSinChannel(): tableBragis(&bragisSinValue[0]),JoyChannelBase(),
    gainResistor(1.0),friquensyResistor(1.0),phaseResistor(0.0)
        {

        }

    virtual IResistor& ISpeedResistor()     {   return gainResistor;  }

    virtual IResistor& IFriqResistor()      {return friquensyResistor;}

    virtual IResistor& IPhaseResistor()     {return phaseResistor;}

    virtual void setBlokingMode(bool mode)    {this->bloking = mode;}



    virtual bool isEnable_(){
        if (hardBlocking)
            return false;
        if (bloking)
            return false;
        return this->isEnable;}

    virtual float getCurrentAdcValue() {
        counter+=friquensyResistor.value;
        counter+=phaseResistor.value;
        if (counter>=500.0)
            counter-=500.0;
        counterNextValue = counter;
        counterNextValue+=friquensyResistor.value;
        counterNextValue+=phaseResistor.value;
        if (counterNextValue>=500.0)
            counterNextValue-=500.0;
        calcBragisValue();
        this->outValue*=50.0;
        this->outValue*=gainResistor.value;
        return outValue;
    }

    virtual float getCalibrationOffsetValue()   {return 0.0;}

private:

    void calcBragisValue() {
        float deltaValue = tableBragis[(uint32_t)counterNextValue];
        deltaValue = -tableBragis[(uint32_t)counter];
        float fractionalPart=counter-(float)(int32_t)counter;
        deltaValue*=fractionalPart;
        this->outValue=deltaValue;
        this->outValue+=tableBragis[(uint32_t)counter];
        //this->outValue=tableBragis[(uint32_t)counter];
    }

};

#endif /* INTERNALDEVICE_SHAKERSININTERNALCHANNEL_HPP_ */
